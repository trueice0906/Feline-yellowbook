{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","user","id","name","email","CardList","kittenUsers","map","kitty","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","kittens","fetch","then","response","json","users","this","filteredKitten","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAkBaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BACpB,6BAAKL,EAAMI,KAAKE,OAChB,6BAAKN,EAAMI,KAAKG,YCLXC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAW,YAAhB,SACKD,EAAMS,YAAYC,KAAI,SAAAC,GAAK,OACxB,cAAC,EAAD,CAAMP,KAAMO,GAAYA,EAAMN,UChB7BO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAYC,EAAf,EAAeA,aAAf,OACrB,uBACIb,UAAY,SACZc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8CHG,G,wDA/Cb,aAAc,IAAD,8BACX,gBAeFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAcF,EAAEG,OAAOC,SAdvC,EAAKC,MAAQ,CACXC,QAAS,GACTJ,YAAc,IALL,E,qDAUb,WAAqB,IAAD,OAClBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,QAAUK,S,oBAO1C,WAEE,MAAgCC,KAAKP,MAA7BC,EAAR,EAAQA,QAAQJ,EAAhB,EAAgBA,YACVW,EAAiBP,EAAQQ,QAAO,SAAArB,GAAK,OACzCA,EAAML,KAAK2B,cAAcC,SAASd,MAGpC,OAEE,sBAAKnB,UAAU,MAAf,UAEE,oBAAIA,UAAU,QAAd,gCACA,cAAC,EAAD,CACEY,YAAY,sBACZC,aAAgBgB,KAAKhB,eAEvB,cAAC,EAAD,CAAUL,YAAasB,W,GArCbI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a5b2502c.chunk.js","sourcesContent":["// import React from 'react';\n// import \"./card.styles.css\"\n\n// export const Card = props => (\n\n//     <div className=\"card-container\">\n//         <img \n//             alt=\"kitten\" \n//             src={`https://robohash.org/${props.monster.id}?set=set4&size=150x150`}/>\n//         <h1> {props.monster.name} </h1>\n//         <h2> {props.monster.email} </h2>\n//     </div>\n\n// )\n\nimport React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card'>\n        <img alt=\"kitty\" src={`https://robohash.org/${props.user.id}?set=set4&size=150x150`} />\n        <h1>{props.user.name}</h1>\n        <h2>{props.user.email}</h2>\n    </div>\n);\n","// import React from 'react';\n// import { Card } from '../card/card.component';\n// import './card-list.styles.css';\n\n// export const CardList = props => (\n   \n//     <div className=\"card-list\">\n//         {props.monsters.map(monster => (\n//             <Card key={monster.id} monster={monster} />\n//         ))}\n//     </div>\n// );\n\nimport React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n    <div className ='card-list'>\n        {props.kittenUsers.map(kitty => (\n            <Card user={kitty} key={kitty.id} />\n        ))}\n\n    </div>\n)","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder,handleChange }) => (\n    <input \n        className = 'search'\n        type=\"search\" \n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n);","\n\nimport React,{ Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      kittens :[],\n      searchField : '',\n    };\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({kittens : users }))\n  }\n\n  handleChange = e => {\n    this.setState({ searchField : e.target.value })\n  }\n\n  render() {\n\n    const { kittens,searchField } = this.state;\n    const filteredKitten = kittens.filter(kitty => \n      kitty.name.toLowerCase().includes(searchField)\n      )\n\n    return(\n\n      <div className=\"App\">\n\n        <h1 className=\"title\">Feline Yellow Book</h1>\n        <SearchBox \n          placeholder=\"search for kitty...\" \n          handleChange = {this.handleChange} />\n\n        <CardList kittenUsers={filteredKitten} />\n         \n      </div> \n\n\n    ) \n  }\n\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}